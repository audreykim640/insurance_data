---
title: "Insurance prices"
format: html
editor: visual
---

## Insurance pricing

### Selecting urban areas

```{r}
library(tidyverse)
```

```{r selecting place names and ages}
places_all <- read.csv("DECENNIALDP2020.DP1-Data.csv") |>
  separate(NAME, c("CITY", "STATE"), sep = ", ") |>
  mutate(CITY = toupper(CITY)) |>
  rename(POP = DP1_0001C,
         age0_5 = DP1_0002P,
         age5_10 = DP1_0003P,
         age10_15 = DP1_0004P,
         age15_20 = DP1_0005P,
         age20_25 = DP1_0006P,
         age25_30 = DP1_0007P,
         age30_35 = DP1_0008P,
         age35_40 = DP1_0009P,
         age40_45 = DP1_0010P,
         age45_50 = DP1_0011P,
         age50_55 = DP1_0012P,
         age55_60 = DP1_0013P,
         age60_65 = DP1_0014P,
         age65_70 = DP1_0015P,
         age70_75 = DP1_0016P,
         age75_80 = DP1_0017P,
         age80_85 = DP1_0018P,
         age85plus = DP1_0019P
                  ) |>
  mutate(age0s = as.numeric(age0_5) + as.numeric(age5_10),
         age10s = as.numeric(age10_15) + as.numeric(age15_20),
         age20s = as.numeric(age20_25) + as.numeric(age25_30),
         age30s = as.numeric(age30_35) + as.numeric(age35_40),
         age40s = as.numeric(age40_45) + as.numeric(age45_50),
         age50s = as.numeric(age50_55) + as.numeric(age55_60),
         age60s = as.numeric(age60_65) + as.numeric(age65_70),
         age70s = as.numeric(age70_75) + as.numeric(age75_80),
         age80plus = as.numeric(age80_85) + as.numeric(age85plus),
         POP = as.numeric(POP),
         STATE = state.abb[match(STATE, state.name)],
         CITY = sub(CITY, pattern = " [[:alpha:]]*$", replacement = "")) |>
  select(CITY, STATE, POP, age0s, age10s, age20s, age30s, 
         age40s, age50s, age60s, age70s, age80plus)
```

```{r select most populous places from each state}
urban_two <- places_all |>
  slice_max(order_by = POP, n = 2, by = STATE) # selecting 2 highest pops
```

```{r randomly select places with 1500-4500 people}
rural_two <- places_all |>
  filter(POP %in% 1500:4500) |>
  group_by(STATE) |>
  sample_n(2)
```

```{r zips}
zips_all <- read_csv("ZIP_Locale_Detail.csv", # https://postalpro.usps.com/ZIP_Locale_Detail
  col_types = cols(.default = col_character())) |> # https://r4ds.had.co.nz/data-import.html
  rename(CITY = `PHYSICAL CITY`,
         STATE = `PHYSICAL STATE`)

zips_urban <- urban_two |>
  left_join(zips_all, by = c("CITY", "STATE")) |>
  select(CITY, STATE, `PHYSICAL ZIP`, POP, age0s, age10s, age20s, age30s,
         age40s, age50s, age60s, age70s, age80plus) |>
  unique() |>
  mutate(type = "Urban")

zips_rural <- rural_two |>
  left_join(zips_all, by = c("CITY", "STATE")) |>
  select(CITY, STATE, `PHYSICAL ZIP`, POP, age0s, age10s, age20s, age30s,
         age40s, age50s, age60s, age70s, age80plus) |>
  unique() |>
  mutate(type = "Rural")

```

```{r create list of links from dictionary of zips and states}

zips_rural_urban <- rbind(zips_urban, zips_rural)

link <- "https://www.kff.org/interactive/subsidy-calculator/#state=STATEABBR&zip=ZIPCODE&income-type=dollars&income=500%2C000&people=1&alternate-plan-family=&adult-count=1&adults%5B0%5D%5Bage%5D=AGENUM&adults%5B0%5D%5Btobacco%5D=0&child-count=0"

dbl_replace <- function (state, zip, link) {
  state <- tolower(state)
  link <- str_replace(state, string = link, pattern = "STATEABBR")
  link <- str_replace(zip, string = link, pattern = "ZIPCODE")
  link
}

zips_urls <- zips_rural_urban |>
  mutate(kff_url = dbl_replace(STATE, `PHYSICAL ZIP`, link = link))

```


```{r start dynamic webpage}

library(RSelenium)
library(netstat) #checks for free port
library(rvest)

rs_driver_object <- rsDriver(browser = "chrome",
  chromever = "140.0.7339.80",
  verbose = F,
  port=free_port(),
  phantomver = NULL
)

remDr <- rs_driver_object$client

```


```{r functions for getting prices from website}
## gets scrapes webpage for one insurance quote
get_insurance_price <- function(remDr, url) {
  if(is.na(url)) {
    NA
  } else {
    remDr$navigate(url)
    # Sys.sleep(1)
    remDr$refresh()
    # Sys.sleep(1)
    read_html(remDr$getPageSource()[[1]]) |>
      html_nodes(".bold-blue") |>
      html_text() |>
      nth(5) |>
      parse_number()   
  }
}


ages <- c(21, 30, 40, 50, 60) |>
  as.character()

## returns one row of prices per zipcode -- prices based on ages written above
get_prices_row <- function(remDr, ages, url) {
  urls_by_age <- map(ages, str_replace, string = url, pattern = "AGENUM")

  print(urls_by_age[[1]])
  prices20 <- map(urls_by_age[[1]], get_insurance_price, remDr = remDr) |>
    unlist()
  prices30 <- map(urls_by_age[2], get_insurance_price, remDr = remDr) |>
     unlist()
  prices40 <- map(urls_by_age[3], get_insurance_price, remDr = remDr) |>
     unlist()
  prices50 <- map(urls_by_age[4], get_insurance_price, remDr = remDr) |>
    unlist()
  prices60 <- map(urls_by_age[5], get_insurance_price, remDr = remDr) |>
    unlist()

  prices_row <- cbind(prices20, prices30, prices40, prices50, prices60) |>
    data.frame()
  
  colnames(prices_row) <- c("prices20", "prices30", "prices40", "prices50", "prices60")

  prices_row
}

```

```{r builds dfs}

## get prices for each row and bind rows into df; form full df
prices_df <- map_dfr(zips_urls$kff_url, get_prices_row, remDr = remDr, ages = ages)
full_df <- cbind(zips_urls, prices_df)

```

```{r ny and vt only -- slight url difference}
ny_vt <- zips_urls |>
  filter(STATE == "NY" | STATE == "VT") |>
  mutate(kff_url = str_replace(kff_url, "alternate-plan-family=", "alternate-plan-family=individual"))

full_df_corrected <- full_df |>
  filter(STATE != "NY" & STATE != "VT")

prices_df_ny_vt <- map_dfr(ny_vt$kff_url, get_prices_row, remDr = remDr, ages = ages)
ny_vt_full <- cbind(ny_vt, prices_df_ny_vt)
full_df_corrected <- rbind(full_df_corrected, ny_vt_full)
```

```{r read page and give integer}
# sources: https://r4ds.hadley.nz/webscraping.html, https://www.appsilon.com/post/webscraping-dynamic-websites-with-r
# install.packages("seleniumPipes", repos = NULL, type="source")

# read_html(remDr$getPageSource()[[1]]) |>
#   html_nodes(".bold-blue") |>
#   html_text() |> 
#   nth(5) |>
#   parse_number()

  # str_replace_all("\\$", "") |>
  # as.integer()

```

```{r}
remDr$closeWindow()
system("taskkill /im java.exe /f")
```

***Graveyard***

```{r}
# Accept cookies
acceptCookies <- remDr$findElement(using = "css selector",
                                   value = ".js-accept-all-close")
acceptCookies$clickElement()
# Give some time to load
Sys.sleep(2)
# Close add
closeAdd <- remDr$findElement(using = "css selector",
                              value = "#advertClose")
closeAdd$clickElement()
```

```{r ***create list of zips***}
library(httr)
library(jsonlite)

key <- "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI2IiwianRpIjoiZDk4MGYzMjMyNDYwZDUwZDcxZGJlNmJiMmE4OTAyNmRiMTIzMDJmNDA1NGJlNDNkNDdkOTY0ZjQ2MDM3NjJjZTkyYWJhYWVmMDZlZmZjZjEiLCJpYXQiOjE3NTY5Mjk5NzkuNDQ0NzkyLCJuYmYiOjE3NTY5Mjk5NzkuNDQ0Nzk0LCJleHAiOjIwNzI0NjI3NzkuNDQwNjQzLCJzdWIiOiIxMDc5NDciLCJzY29wZXMiOltdfQ.U7VWOKAy0YLt6oH5y5Nq0ie2RMTwyWIPVY1FbcoPwzP9InJUsAmOIDpMDAw5pDhqyHxkAho6j4UBKrmi__ACzA"
url <- "https://www.huduser.gov/hudapi/public/usps"

# Note that type is set to 1 which will return values for the ZIP to Tract file and query is set to VA which will return Zip Codes in Virginia
response <- httr::GET(url, query = list(type = 1, query = "VA"), add_headers(Authorization = paste("Bearer", key)))

#check for errors
httr::http_error(response)

#access up the output
output <- fromJSON(httr::content(response))

#change json to table
table <- fromJSON(output)
```

```{r}

# urban_all <- read.csv("2020_Census_ua_list_all.csv")|>
#   separate(NAME, c("CITY", "STATE"), sep = ", ") |>
#   mutate(CITY = toupper(CITY)) |> 
#   
# 
# urban_all <- separate_rows(urban_all, CITY, 1, sep = "--")
# urban_all <- separate_rows(urban_all, STATE, 1, sep = "--")
# 
# urban_indiv_names <- read.csv("2020_Census_ua_list_all.csv")|>
#   separate(NAME, c("CITY", "STATE"), sep = ", ") |>
#   mutate(
#          CITY = sapply(strsplit(CITY,"-"), `[`, 1),
#          STATE = sapply(strsplit(STATE,"-"), `[`, 1))
# 
```

```{r}
# map2(zips_char, states, dbl_replace, link = link)

# test <- zips_urls |>
#   mutate(insurance_price = get_insurance_price(remDr, kff_url))
```

